import React, { useState, useEffect } from 'react';
import UserAvatar from './UserAvatar';

const UserQuestions = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Th√™m h√†m refresh ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ l√†m m·ªõi d·ªØ li·ªáu
  const refreshQuestions = () => {
    setLoading(true);
    setError(null);
    fetchUserQuestions();
  };

  useEffect(() => {
    fetchUserQuestions();
  }, []);
    // Di chuy·ªÉn h√†m fetchUserQuestions ra ngo√†i useEffect ƒë·ªÉ c√≥ th·ªÉ g·ªçi l·∫°i
  const fetchUserQuestions = async () => {
    try {
      setLoading(true);
      const loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || '{}');
      const userId = localStorage.getItem('userId') || loggedInUser.userID || loggedInUser.id;
      
      if (!userId) {
        throw new Error('Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng');
      }
      
      console.log('ƒêang g·ªçi API v·ªõi userId:', userId);
      const response = await fetch(`http://localhost:8080/api/questions/user/${userId}`);
      
      // Log response status ƒë·ªÉ debug
      console.log('API response status:', response.status);
      
      if (!response.ok) {
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¢u h·ªèi. Status: ${response.status}`);
      }
      
      const questions = await response.json();
      console.log('D·ªØ li·ªáu c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:', questions);
      
      // T·∫°o danh s√°ch c√¢u h·ªèi v·ªõi c√¢u tr·∫£ l·ªùi (n·∫øu c√≥)
      const questionsWithAnswers = await Promise.all(
        questions.map(async (question) => {
          // Format d·ªØ li·ªáu c√¢u h·ªèi
          const formattedQuestion = {
            id: question.id || question.questionID,
            questionID: question.id || question.questionID,
            content: question.content || question.question,
            date: question.date || question.createdAt,
            status: question.status || 'pending',
            createdAt: question.createdAt || question.date,
            title: question.title || '',
          };

          // Map status t·ª´ backend sang frontend
          let isResolved = formattedQuestion.status === 'resolved';
          // N·∫øu c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt th√¨ l·∫•y c√¢u tr·∫£ l·ªùi
          if (isResolved) {
            try {
              const answerResponse = await fetch(`http://localhost:8080/api/answers/${question.id || question.questionID}`);
              if (answerResponse.ok) {
                const answerData = await answerResponse.json();
                formattedQuestion.reply = answerData.content;
                formattedQuestion.answeredAt = answerData.createdAt;
                formattedQuestion.status = 'resolved';
                formattedQuestion.consultantID = answerData.consultantID;
              } else {
                // Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi
              }
            } catch (error) {
              // L·ªói khi l·∫•y c√¢u tr·∫£ l·ªùi
            }
          }
          return formattedQuestion;
        })
      );
        console.log('D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v·ªõi c√¢u tr·∫£ l·ªùi:', questionsWithAnswers);
      setQuestions(questionsWithAnswers);
    } catch (error) {
      console.error('L·ªói khi t·∫£i c√¢u h·ªèi:', error);
      setError(error.message);
      
      // D·ªØ li·ªáu m·∫´u cho tr∆∞·ªùng h·ª£p API ch∆∞a ho√†n thi·ªán
      setQuestions([
        {
          id: 1,
          questionID: 1,
          title: "C√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe",
          content: "T√¥i b·ªã ƒëau b·ª•ng d∆∞·ªõi th∆∞·ªùng xuy√™n, c√≥ n√™n ƒëi kh√°m kh√¥ng?",
          date: new Date().toISOString(),
          createdAt: new Date().toISOString(),
          status: "pending"
        },
        {
          id: 2,
          questionID: 2,
          title: "Lo l·∫Øng v·ªÅ s·ª©c kh·ªèe sinh s·∫£n",
          content: "L√†m th·∫ø n√†o ƒë·ªÉ gi·∫£m lo l·∫Øng v·ªÅ v·∫•n ƒë·ªÅ s·ª©c kh·ªèe sinh s·∫£n?",
          date: new Date().toISOString(),
          createdAt: new Date().toISOString(),
          status: "answered",
          reply: "B·∫°n n√™n tham kh·∫£o √Ω ki·∫øn chuy√™n gia v√† th·ª±c h√†nh th∆∞ gi√£n. Ngo√†i ra, vi·ªác t√¨m hi·ªÉu ki·∫øn th·ª©c ƒë√∫ng ƒë·∫Øn v·ªÅ s·ª©c kh·ªèe sinh s·∫£n c≈©ng r·∫•t quan tr·ªçng ƒë·ªÉ gi·∫£m lo l·∫Øng kh√¥ng c·∫ßn thi·∫øt.",
          answeredAt: new Date(Date.now() - 86400000).toISOString()
        }
      ]);
    } finally {
      setLoading(false);
    }
  };
    // H√†m format ng√†y gi·ªù
  const formatDate = (dateString) => {
    if (!dateString) return "Kh√¥ng c√≥ th√¥ng tin";
    
    try {
      return new Date(dateString).toLocaleDateString('vi-VN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (e) {
      console.error('L·ªói khi format ng√†y:', e);
      return "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá";
    }
  };
  return (
    <div className="question-answer-section">
      {loading && (
        <div style={{ textAlign: 'center', padding: '2rem' }}>
          <p>ƒêang t·∫£i c√¢u h·ªèi...</p>
        </div>
      )}
      
      {error && (
        <div style={{ 
          backgroundColor: '#ffebee', 
          padding: '1rem', 
          borderRadius: '8px', 
          marginBottom: '1rem',
          color: '#c62828'
        }}>
          <p>L·ªói: {error}</p>
          <button 
            onClick={refreshQuestions}
            style={{
              backgroundColor: '#c62828',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              marginTop: '0.5rem'
            }}
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      )}
      
      {!loading && !error && (
        <div style={{ 
          display: 'flex', 
          justifyContent: 'flex-end',
          marginBottom: '1rem'
        }}>
          <button 
            onClick={refreshQuestions}
            style={{
              backgroundColor: 'transparent',
              color: '#0891b2',
              border: '1px solid #0891b2',
              padding: '0.5rem 1rem',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
          >
            <span>üîÑ</span> L√†m m·ªõi
          </button>
        </div>
      )}
      
      {!loading && questions.length === 0 && (
        <div style={{ 
          backgroundColor: '#f5f5f5', 
          padding: '2rem', 
          borderRadius: '8px', 
          textAlign: 'center'
        }}>
          <p>B·∫°n ch∆∞a c√≥ c√¢u h·ªèi n√†o. H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ nh·∫≠n t∆∞ v·∫•n.</p>          <button
            style={{
              backgroundColor: '#0891b2',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '1rem',
              marginTop: '1rem'
            }}
            onClick={() => window.location.href = "/ask-question"}
          >
            ƒê·∫∑t c√¢u h·ªèi
          </button>
        </div>
      )}
      
      {questions.map((question) => {
        // Map status cho hi·ªÉn th·ªã
        const isAnswered = question.status === 'resolved';
        const statusLabel = isAnswered ? 'ƒê√£ tr·∫£ l·ªùi' : 'ƒêang ch·ªù';
        const statusBg = isAnswered ? '#e8f5e9' : '#fff8e1';
        const statusColor = isAnswered ? '#43a047' : '#ff8f00';
        return (
          <div 
            key={question.id || question.questionID}
            style={{
              padding: '1.5rem',
              marginBottom: '1.5rem',
              backgroundColor: 'white',
              borderRadius: '12px',
              boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
            }}
          >
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '0.75rem' 
            }}>
              <h3 style={{ margin: '0', fontSize: '1.2rem', color: '#333' }}>
                {question.title || 'C√¢u h·ªèi c·ªßa b·∫°n'}
              </h3>
              <div style={{
                padding: '0.25rem 0.75rem',
                borderRadius: '20px',
                fontSize: '0.8rem',
                backgroundColor: statusBg,
                color: statusColor
              }}>
                {statusLabel}
              </div>
            </div>
            
            <div style={{ 
              padding: '1rem', 
              backgroundColor: '#f5f5f5', 
              borderRadius: '8px',
              marginBottom: isAnswered ? '1rem' : '0'
            }}>
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                marginBottom: '0.75rem' 
              }}>
                <div style={{ 
                  width: '40px', 
                  height: '40px', 
                  borderRadius: '50%', 
                  backgroundColor: '#e1f5fe', 
                  display: 'flex', 
                  alignItems: 'center', 
                  justifyContent: 'center',
                  marginRight: '0.75rem'
                }}>
                  üë§
                </div>
                <div>
                  <p style={{ margin: '0', fontWeight: 'bold' }}>B·∫°n</p>
                  <span style={{ fontSize: '0.75rem', color: '#757575' }}>
                    {formatDate(question.date || question.createdAt)}
                  </span>
                </div>
              </div>
              <p style={{ margin: '0' }}>{question.content || question.question}</p>
            </div>
            {isAnswered && (
              <div style={{ 
                padding: '1rem', 
                backgroundColor: '#e1f5fe', 
                borderRadius: '8px',
                marginTop: '1rem' 
              }}>
                <div style={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  marginBottom: '0.75rem' 
                }}>
                  <div style={{ 
                    width: '40px', 
                    height: '40px', 
                    borderRadius: '50%', 
                    backgroundColor: '#e8f5e9', 
                    display: 'flex', 
                    alignItems: 'center', 
                    justifyContent: 'center',
                    marginRight: '0.75rem'
                  }}>
                    üë©‚Äç‚öïÔ∏è
                  </div>
                  <div>
                    <p style={{ margin: '0', fontWeight: 'bold', color: '#0891b2' }}>
                      T∆∞ v·∫•n vi√™n
                    </p>
                    <span style={{ fontSize: '0.75rem', color: '#757575' }}>
                      {question.answeredAt || question.replyDate ? 
                        formatDate(question.answeredAt || question.replyDate) : 
                        "ƒê√£ tr·∫£ l·ªùi"}
                    </span>
                  </div>
                </div>
                {question.reply || question.answer ? (
                  <p style={{ margin: '0' }}>{question.reply || question.answer}</p>
                ) : (
                  <p style={{ margin: '0', fontStyle: 'italic', color: '#666' }}>
                    C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi nh∆∞ng kh√¥ng th·ªÉ hi·ªÉn th·ªã n·ªôi dung. Vui l√≤ng l√†m m·ªõi trang.
                  </p>
                )}
                
                <div style={{ marginTop: '1rem', textAlign: 'center' }}>
                  <button style={{
                    backgroundColor: 'transparent',
                    border: '1px solid #0891b2',
                    color: '#0891b2',
                    padding: '0.5rem 1rem',
                    borderRadius: '20px',
                    cursor: 'pointer',
                    fontSize: '0.9rem'
                  }}
                  onClick={() => window.location.href = "/ask-question"}
                  >
                    G·ª≠i c√¢u h·ªèi b·ªï sung
                  </button>
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

export default UserQuestions;