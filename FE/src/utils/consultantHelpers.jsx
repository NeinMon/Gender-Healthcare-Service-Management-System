// Helper functions for ConsultantInterface component

import React from 'react';

// Utility functions
export const formatDate = (dateString) => {
  if (!dateString) return 'Kh√¥ng c√≥ ng√†y';
  
  const options = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  };
  return new Date(dateString).toLocaleDateString('vi-VN', options);
};

export const getStatusBadge = (status, id) => {
  let badgeStyle = {
    padding: '6px 12px',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500',
    display: 'inline-block'
  };

  // Map status values to show only two states: ƒê√£ tr·∫£ l·ªùi and Ch·ªù tr·∫£ l·ªùi
  switch(status?.toLowerCase()) {
    case 'resolved':
      return <span key={`status-${id || 'resolved'}`} style={{...badgeStyle, backgroundColor: '#d0f7ea', color: '#0f766e'}}>ƒê√£ tr·∫£ l·ªùi</span>;
    case 'pending':
    default:
      return <span key={`status-${id || 'pending'}`} style={{...badgeStyle, backgroundColor: '#fef9c3', color: '#ca8a04'}}>Ch·ªù tr·∫£ l·ªùi</span>;
  }
};

// API functions
export const fetchConsultantInfo = async (setConsultant) => {
  try {
    const userId = localStorage.getItem('userId') || sessionStorage.getItem('userId');
    
    if (!userId) {
      console.error('Kh√¥ng t√¨m th·∫•y userId trong storage');
      return;
    }
    
    const response = await fetch(`http://localhost:8080/api/users/${userId}`);
    if (response.ok) {
      const data = await response.json();
      setConsultant(data);
    } else {
      console.error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t∆∞ v·∫•n vi√™n');
    }
  } catch (err) {
    console.error('L·ªói khi l·∫•y th√¥ng tin t∆∞ v·∫•n vi√™n:', err);
  }
};

export const fetchQuestions = async (setQuestions, setLoading, setError) => {
  try {
    setLoading(true);
    const response = await fetch('http://localhost:8080/api/questions');

    if (!response.ok) {
      throw new Error('Failed to fetch questions');
    }

    const data = await response.json();
    setQuestions(data);
  } catch (err) {
    setError('Error fetching questions: ' + err.message);
    console.error('Error fetching data:', err);
  } finally {
    setLoading(false);
  }
};

export const fetchExistingAnswer = async (questionId, setLoadingAnswer, setExistingAnswer, setAnswers, setAnswerText) => {
  try {
    setLoadingAnswer(true);
    const response = await fetch(`http://localhost:8080/api/answers/${questionId}`);
    
    if (response.ok) {
      const data = await response.json();
      setExistingAnswer(data);
      
      // Store the answer in the answers cache
      setAnswers(prev => ({
        ...prev,
        [questionId]: data
      }));
      
      // Kh√¥ng ƒëi·ªÅn s·∫µn v√†o √¥ tr·∫£ l·ªùi ƒë·ªÉ tr√°nh hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi hai l·∫ßn
      // Ch·ªâ hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ c√≥ trong ph·∫ßn existingAnswer
      setAnswerText('');
    } else {
      // No answer exists or other error
      setExistingAnswer(null);
      setAnswerText('');
    }
  } catch (error) {
    console.error('Error fetching answer:', error);
    setExistingAnswer(null);
  } finally {
    setLoadingAnswer(false);
  }
};

export const fetchBookings = async (setLoadingBookings, setBookings, setBookingUserDetails) => {
  console.log('üîÑ fetchBookings called');
  setLoadingBookings(true);
  const consultantId = localStorage.getItem('userId') || sessionStorage.getItem('userId');
  console.log('üë§ Consultant ID:', consultantId);
  
  if (!consultantId) {
    console.log('‚ùå No consultant ID found');
    setBookings([]);
    setLoadingBookings(false);
    return;
  }
  
  try {
    console.log('üì° Fetching bookings from API...');
    const res = await fetch(`http://localhost:8080/api/bookings/consultant/${consultantId}`);
    console.log('üì° API Response status:', res.status);
    
    if (res.ok) {
      const data = await res.json();
      console.log('üìã Bookings data:', data);
      setBookings(data);
      
      // Fetch user info for each booking
      const uniqueUserIds = [...new Set(data.map(b => b.userId))];
      console.log('üë• Unique user IDs:', uniqueUserIds);
      
      const userMap = {};
      await Promise.all(uniqueUserIds.map(async (userId) => {
        try {
          const userRes = await fetch(`http://localhost:8080/api/users/${userId}`);
          if (userRes.ok) {
            const userData = await userRes.json();
            userMap[userId] = userData;
          } else {
            userMap[userId] = { fullName: 'Kh√¥ng r√µ' };
          }
        } catch {
          userMap[userId] = { fullName: 'Kh√¥ng r√µ' };
        }
      }));
      console.log('üë• User map:', userMap);
      setBookingUserDetails(userMap);
    } else {
      console.log('‚ùå API error:', res.status);
      setBookings([]);
    }
  } catch (error) {
    console.error('‚ùå Fetch error:', error);
    setBookings([]);
  }
  console.log('‚úÖ fetchBookings completed, setting loading to false');
  setLoadingBookings(false);
};

// Event handlers
export const handleQuestionClick = (question, selectedQuestion, setSelectedQuestion, setAnswerText, setExistingAnswer, fetchExistingAnswer) => {
  // X√°c ƒë·ªãnh ID c√¢u h·ªèi (h·ªó tr·ª£ c·∫£ questionID v√† id)
  const questionId = question.questionID || question.id;
  const selectedId = selectedQuestion ? (selectedQuestion.questionID || selectedQuestion.id) : null;
  
  const isSameQuestion = selectedQuestion && selectedId === questionId;
  
  if (!isSameQuestion) {
    setSelectedQuestion(question);
    setAnswerText('');
    
    // N·∫øu c√¢u h·ªèi ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi (resolved) th√¨ hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√≥
    if (question.status?.toLowerCase() === 'resolved') {
      // S·ª≠ d·ª•ng ID ch√≠nh x√°c ƒë·ªÉ truy v·∫•n c√¢u tr·∫£ l·ªùi
      fetchExistingAnswer(questionId);
    } else {
      // Kh√¥ng ph·∫£i c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi, kh√¥ng hi·ªÉn th·ªã ph·∫ßn c√¢u tr·∫£ l·ªùi c≈©
      setExistingAnswer(null);
    }
  } else {
    // Clicking the same question again closes it
    setSelectedQuestion(null);
    setAnswerText('');
    setExistingAnswer(null);
  }
};

export const handleAnswerChange = (e, setAnswerText) => {
  setAnswerText(e.target.value);
};

export const handleFilterChange = (e, setFilterStatus) => {
  setFilterStatus(e.target.value);
};

// Answer submission function
export const submitAnswer = async (selectedQuestion, answerText, setSubmitting, setQuestions, setSelectedQuestion, setAnswerText) => {
  if (!answerText.trim()) {
    alert('Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi');
    return;
  }

  if (!selectedQuestion) {
    alert('Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi. Vui l√≤ng ch·ªçn c√¢u h·ªèi kh√°c.');
    console.error('selectedQuestion kh√¥ng t·ªìn t·∫°i', selectedQuestion);
    return;
  }
  
  // Ki·ªÉm tra xem ID c√¢u h·ªèi n·∫±m ·ªü field n√†o (id ho·∫∑c questionID)
  const questionId = selectedQuestion.questionID || selectedQuestion.id;
  if (!questionId) {
    alert('Kh√¥ng t√¨m th·∫•y ID c√¢u h·ªèi. Vui l√≤ng ch·ªçn c√¢u h·ªèi kh√°c.');
    console.error('Kh√¥ng t√¨m th·∫•y ID trong c√¢u h·ªèi', selectedQuestion);
    return;
  }

  try {
    setSubmitting(true);
    // L·∫•y ID c·ªßa consultant t·ª´ localStorage ho·∫∑c sessionStorage
    const consultantIdStr = localStorage.getItem('userId') || 
                        sessionStorage.getItem('userId') || 
                        '1073741824'; // S·ª≠ d·ª•ng ID ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh t·ª´ y√™u c·∫ßu API
    
    // ƒê·∫£m b·∫£o ID ƒë∆∞·ª£c chuy·ªÉn sang s·ªë nguy√™n
    const consultantId = parseInt(consultantIdStr, 10);
      // ƒê·ªëi v·ªõi questionId, s·ª≠ d·ª•ng questionID (vi·∫øt hoa) ho·∫∑c id (vi·∫øt th∆∞·ªùng) t√πy thu·ªôc v√†o API
    const rawQuestionId = selectedQuestion.questionID || selectedQuestion.id;
    const questionIdNum = parseInt(rawQuestionId, 10);
    
    // Ki·ªÉm tra v√† ghi log ƒë·ªÉ debug
    console.log('Selected question:', selectedQuestion);
    console.log('Question ID field availability:', { 
      'id': selectedQuestion.id !== undefined ? 'exists' : 'missing',
      'questionID': selectedQuestion.questionID !== undefined ? 'exists' : 'missing'
    });
    console.log('Question ID (raw):', rawQuestionId);
    console.log('Question ID (used):', questionIdNum);
    console.log('Consultant ID (used):', consultantId);
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu theo ƒë√∫ng ƒë·ªãnh d·∫°ng API y√™u c·∫ßu
    const answerData = {
      questionId: questionIdNum, // ƒê√£ chuy·ªÉn sang s·ªë nguy√™n
      consultantId: consultantId, // ƒê√£ chuy·ªÉn sang s·ªë nguy√™n
      content: answerText.trim() // N·ªôi dung c√¢u tr·∫£ l·ªùi (ƒë√£ lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a)
    };

    console.log('G·ª≠i c√¢u tr·∫£ l·ªùi v·ªõi d·ªØ li·ªáu:', answerData);
    
    // Ki·ªÉm tra m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi g·ªçi API
    console.log('Request body (stringified):', JSON.stringify(answerData));
    
    // G·ªçi API ƒë·ªÉ g·ª≠i c√¢u tr·∫£ l·ªùi
    const response = await fetch('http://localhost:8080/api/answers/reply', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(answerData)
    });

    console.log('Response status:', response.status);
    console.log('Response statusText:', response.statusText);
    
    // Log headers
    const headers = {};
    response.headers.forEach((value, key) => {
      headers[key] = value;
    });
    console.log('Response headers:', headers);
    
    let responseData;
    try {
      const text = await response.text();
      console.log('Raw response text:', text);
      
      // N·∫øu text kh√¥ng r·ªóng, th·ª≠ parse th√†nh JSON
      if (text && text.trim()) {
        try {
          responseData = JSON.parse(text);
          console.log('Parsed response data:', responseData);
        } catch (jsonError) {
          console.error('Error parsing JSON:', jsonError);
          responseData = { message: 'Invalid JSON response' };
        }
      } else {
        responseData = { message: 'Empty response from server' };
      }
    } catch (e) {
      console.error('Failed to read response text:', e);
      responseData = { message: 'Kh√¥ng th·ªÉ ƒë·ªçc ph·∫£n h·ªìi t·ª´ server' };
    }

    // Ki·ªÉm tra ph·∫£n h·ªìi d·ª±a tr√™n status code
    if (!response.ok) {
      let errorMessage = 'Unknown error occurred';
      
      // X·ª≠ l√Ω c√°c m√£ l·ªói ph·ªï bi·∫øn
      if (response.status === 400) {
        errorMessage = `Bad Request: ${responseData.message || 'Invalid question or consultant ID format'}`;
      } else if (response.status === 404) {
        errorMessage = 'Not Found: Question or consultant not found';
      } else if (response.status === 500) {
        errorMessage = 'Server Error: Please try again later';
      } else if (responseData && responseData.message) {
        errorMessage = responseData.message;
      }
      
      throw new Error(`Failed to submit answer: ${errorMessage}`);
    }
    
    console.log('C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', responseData);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√¢u h·ªèi trong UI - s·ª≠ d·ª•ng ID ph√π h·ª£p (questionID ho·∫∑c id)
    const updateId = selectedQuestion.questionID || selectedQuestion.id;
    setQuestions(questions => questions.map(q => {
      // Ki·ªÉm tra c·∫£ hai tr∆∞·ªùng id c√≥ th·ªÉ c√≥
      const qId = q.questionID || q.id;
      return qId === parseInt(updateId, 10) ? { ...q, status: 'resolved' } : q;
    }));

    // ƒê√≥ng ph·∫ßn tr·∫£ l·ªùi
    setSelectedQuestion(null);
    setAnswerText('');
    
    alert('C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
  } catch (err) {
    console.error('Error submitting answer:', err);
    console.error('Error details:', {
      message: err.message,
      stack: err.stack,
      selectedQuestionId: selectedQuestion?.id,
      answerTextLength: answerText.length,
      consultantId: parseInt(localStorage.getItem('userId') || sessionStorage.getItem('userId') || '1073741824', 10)
    });
    
    // Hi·ªán th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
    let errorMsg = err.message;
    if (errorMsg.includes('400')) {
      errorMsg = 'L·ªói d·ªØ li·ªáu: ID c√¢u h·ªèi ho·∫∑c ID t∆∞ v·∫•n vi√™n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.';
    } else if (errorMsg.includes('server')) {
      errorMsg = 'L·ªói k·∫øt n·ªëi v·ªõi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
    
    alert('L·ªói khi g·ª≠i c√¢u tr·∫£ l·ªùi: ' + errorMsg);
  } finally {
    setSubmitting(false);
  }
};

// Booking status update functions
export const updateBookingStatus = async (bookingId, newStatus, endTime = null, setBookings, showVideoCall) => {
  try {
    let apiUrl = `http://localhost:8080/api/bookings/${bookingId}/status?status=${encodeURIComponent(newStatus)}`;
    if (newStatus === 'ƒê√£ k·∫øt th√∫c') {
      // Truy·ªÅn endTime d·∫°ng HH:mm n·∫øu c√≥
      const now = new Date();
      const hh = String(now.getHours()).padStart(2, '0');
      const mm = String(now.getMinutes()).padStart(2, '0');
      const endTimeStr = endTime || `${hh}:${mm}`;
      apiUrl += `&endTime=${encodeURIComponent(endTimeStr)}`;
    }
    console.log(`API URL: ${apiUrl}`);
    const res = await fetch(apiUrl, { 
      method: 'PUT',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (res.ok) {
      console.log(`‚úÖ API c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng cho booking ID ${bookingId}`);
      
      // C·∫≠p nh·∫≠t l·∫°i UI
      setBookings(prev => prev.map(b => 
        b.bookingId === bookingId || b.bookingId === parseInt(bookingId) 
          ? { ...b, status: newStatus } 
          : b
      ));
      
      // Hi·ªán th√¥ng b√°o n·∫øu c·∫ßn (kh√¥ng hi·ªán cho "ƒê√£ k·∫øt th√∫c" khi ƒëang trong VideoCall)
      const isFromVideoCall = newStatus === 'ƒê√£ k·∫øt th√∫c' && showVideoCall;
      
      if (!isFromVideoCall) {
        if (newStatus === 'ƒê√£ duy·ªát') {
          alert('ƒê√£ x√°c nh·∫≠n l·ªãch h·∫πn!');
        } else if (newStatus === 'Kh√¥ng ƒë∆∞·ª£c duy·ªát') {
          alert('ƒê√£ t·ª´ ch·ªëi l·ªãch h·∫πn!');
        } else if (newStatus === 'ƒê√£ k·∫øt th√∫c') {
          alert('ƒê√£ k·∫øt th√∫c l·ªãch h·∫πn!');
        }
      }
      
      return true;
    } else {
      const errorText = await res.text();
      console.error(`‚ùå L·ªói t·ª´ API (HTTP ${res.status}): ${errorText}`);
      
      // Ch·ªâ hi·ªÉn th·ªã alert n·∫øu kh√¥ng ph·∫£i t·ª´ VideoCall ƒë·ªÉ tr√°nh gi√°n ƒëo·∫°n UX
      if (!showVideoCall) {
        alert(`L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn (HTTP ${res.status}): ${newStatus}`);
      }
      return false;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${error.message}`, error);
    
    // Ch·ªâ hi·ªÉn th·ªã alert n·∫øu kh√¥ng ph·∫£i t·ª´ VideoCall ƒë·ªÉ tr√°nh gi√°n ƒëo·∫°n UX
    if (!showVideoCall) {
      alert(`L·ªói k·∫øt n·ªëi m√°y ch·ªß: ${error.message}`);
    }
    return false;
  }
};

// Wrapper functions for specific status updates
export const confirmBooking = async (bookingId, setBookings, showVideoCall) => {
  await updateBookingStatus(bookingId, 'ƒê√£ duy·ªát', null, setBookings, showVideoCall);
};

export const rejectBooking = async (bookingId, setBookings, showVideoCall) => {
  await updateBookingStatus(bookingId, 'Kh√¥ng ƒë∆∞·ª£c duy·ªát', null, setBookings, showVideoCall);
};

export const endBooking = async (bookingId, setBookings, showVideoCall) => {
  await updateBookingStatus(bookingId, 'ƒê√£ k·∫øt th√∫c', null, setBookings, showVideoCall);
};

// Filter functions
export const getFilteredQuestions = (questions, filterStatus) => {
  // Ki·ªÉm tra n·∫øu questions kh√¥ng ph·∫£i l√† array ho·∫∑c ch∆∞a ƒë∆∞·ª£c load
  if (!Array.isArray(questions)) {
    return [];
  }
  
  return questions.filter(question => {
    if (filterStatus === 'all') return true;
    
    // Filter based on the two states: 'resolved' (ƒê√£ tr·∫£ l·ªùi) and 'pending' (Ch·ªù tr·∫£ l·ªùi)
    if (filterStatus === 'pending' && (!question.status || question.status.toLowerCase() === 'pending')) {
      return true;
    }
    if (filterStatus === 'resolved' && question.status?.toLowerCase() === 'resolved') {
      return true;
    }
    
    return false;
  });
};

export const getFilteredBookings = (bookings, filterStatus) => {
  // Ki·ªÉm tra n·∫øu bookings kh√¥ng ph·∫£i l√† array ho·∫∑c ch∆∞a ƒë∆∞·ª£c load
  if (!Array.isArray(bookings)) {
    return [];
  }
  
  const filtered = filterStatus === 'all'
    ? bookings
    : bookings.filter(b => b.status === filterStatus);
  
  // T·∫°m th·ªùi b·ªè filter PAID ƒë·ªÉ test - hi·ªÉn th·ªã t·∫•t c·∫£ bookings
  return filtered;
  // L·ªçc booking ch·ªâ hi·ªÉn th·ªã c√°c l·ªãch ƒë√£ PAID
  // return filtered.filter(b => b.payment?.status === 'PAID');
};

// Data constants
export const statusOptions = [
  { value: 'all', label: 'T·∫•t c·∫£' },
  { value: 'pending', label: 'Ch·ªù tr·∫£ l·ªùi' },
  { value: 'resolved', label: 'ƒê√£ tr·∫£ l·ªùi' }
];

// Video call handler
export const handleVideoCallLeave = async (endCall, videoChannel, setBookings, updateBookingStatus, setShowVideoCall, setVideoChannel) => {
  // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i TR∆Ø·ªöC khi ·∫©n UI cu·ªôc g·ªçi
  console.log(`üîÑ [ConsultantInterface] Cu·ªôc g·ªçi k·∫øt th√∫c v·ªõi endCall=${endCall}`);
  console.log(`üîÑ [ConsultantInterface] Channel: ${videoChannel}`);
  
  if (endCall && videoChannel) {
    try {
      // Extract bookingId from the channelName
      const bookingId = videoChannel.includes('_') 
        ? videoChannel.split('_')[1] 
        : videoChannel;
      
      console.log(`üìù [ConsultantInterface] L·ªãch h·∫πn ID: ${bookingId} - ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "ƒê√£ k·∫øt th√∫c"`);
      
      // Update booking status to "ƒê√£ k·∫øt th√∫c"
      if (bookingId) {
        setBookings(prev => prev.map(b => 
          b.bookingId === parseInt(bookingId) ? { ...b, status: 'ƒê√£ k·∫øt th√∫c' } : b
        ));
        // G·ª≠i endTime th·ª±c t·∫ø l√™n backend
        const now = new Date();
        const hh = String(now.getHours()).padStart(2, '0');
        const mm = String(now.getMinutes()).padStart(2, '0');
        const endTimeStr = `${hh}:${mm}`;
        await updateBookingStatus(bookingId, 'ƒê√£ k·∫øt th√∫c', endTimeStr, setBookings, true);
      }
    } catch (err) {
      console.error('‚ùå [ConsultantInterface] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', err);
      alert('ƒê√£ c√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng ki·ªÉm tra v√† th·ª≠ l·∫°i.');
    }
  }
  
  // Sau khi x·ª≠ l√Ω xong, m·ªõi ·∫©n UI cu·ªôc g·ªçi
  setShowVideoCall(false);
  setVideoChannel('');
};

// Video call functions
export const startVideoCall = (bookingId) => {
  // Implementation for starting video call
  console.log('Starting video call for booking:', bookingId);
  // Add your video call logic here
};
